// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dg_foods_api.Models;

namespace dg_foods_api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("dg_foods_api.Models.Bank", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("Vector")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vector");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("dg_foods_api.Models.Banks2", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<string>("NewCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("new_code");

                    b.Property<long?>("Vector")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vector");

                    b.ToTable("banks2");
                });

            modelBuilder.Entity("dg_foods_api.Models.BreakAdjustmentModel", b =>
                {
                    b.Property<int>("bank")
                        .HasColumnType("INTEGER");

                    b.Property<int>("adjustment")
                        .HasColumnType("INTEGER");

                    b.HasKey("bank");

                    b.ToTable("BreakAdjustments");
                });

            modelBuilder.Entity("dg_foods_api.Models.Checker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("checkers");
                });

            modelBuilder.Entity("dg_foods_api.Models.CutModel", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PPMH")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("aqlScoreStandard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<string>("customer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("cutName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("cutRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("pattern")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q10Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q1Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q2Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q3Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q4Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q5Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q6Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q7Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q8Confidence")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("q9Confidence")
                        .HasColumnType("TEXT");

                    b.Property<string>("question1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question10")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question3")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question4")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question5")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question6")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question7")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question8")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("question9")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("sampleSize")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("standardPrimaryYield")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<int>("timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("weightMaximum")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("weightMinimum")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("weightScoreStandard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("wtConfidence")
                        .HasColumnType("TEXT");

                    b.HasKey("code");

                    b.ToTable("Cuts");
                });

            modelBuilder.Entity("dg_foods_api.Models.Dump", b =>
                {
                    b.Property<string>("Cut")
                        .HasColumnType("TEXT")
                        .HasColumnName("cut");

                    b.Property<string>("Station")
                        .HasColumnType("TEXT")
                        .HasColumnName("station");

                    b.Property<string>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timestamp");

                    b.Property<string>("Vector")
                        .HasColumnType("TEXT")
                        .HasColumnName("vector");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT")
                        .HasColumnName("weight");

                    b.ToTable("dumps");
                });

            modelBuilder.Entity("dg_foods_api.Models.Employee", b =>
                {
                    b.Property<int>("Cutter_number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("cutter_number");

                    b.Property<string>("EmployeeCategory")
                        .HasColumnType("TEXT")
                        .HasColumnName("employee_category");

                    b.Property<string>("Enabled")
                        .HasColumnType("TEXT")
                        .HasColumnName("enabled");

                    b.Property<string>("HireDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("hire_date");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<string>("Shift")
                        .HasColumnType("TEXT")
                        .HasColumnName("shift");

                    b.HasKey("Cutter_number");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("dg_foods_api.Models.QaLogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("checker_cutter_number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cut")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("cutter_number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("index")
                        .HasColumnType("INTEGER");

                    b.Property<double>("inspectionTime")
                        .HasColumnType("REAL");

                    b.Property<string>("product")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("station")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("qalog");
                });

            modelBuilder.Entity("dg_foods_api.Models.QcResult", b =>
                {
                    b.Property<long?>("Bank")
                        .HasColumnType("INTEGER")
                        .HasColumnName("bank");

                    b.Property<long?>("Canceled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("canceled");

                    b.Property<string>("CheckerName")
                        .HasColumnType("TEXT")
                        .HasColumnName("checker_name");

                    b.Property<string>("Cut")
                        .HasColumnType("TEXT")
                        .HasColumnName("cut");

                    b.Property<long?>("Cycle")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cycle");

                    b.Property<double?>("Defect0")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_0");

                    b.Property<double?>("Defect1")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_1");

                    b.Property<double?>("Defect10")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_10");

                    b.Property<double?>("Defect2")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_2");

                    b.Property<double?>("Defect3")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_3");

                    b.Property<double?>("Defect4")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_4");

                    b.Property<double?>("Defect5")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_5");

                    b.Property<double?>("Defect6")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_6");

                    b.Property<double?>("Defect7")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_7");

                    b.Property<double?>("Defect8")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_8");

                    b.Property<double?>("Defect9")
                        .HasColumnType("REAL")
                        .HasColumnName("defect_9");

                    b.Property<long?>("Failed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("failed");

                    b.Property<long?>("Passed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passed");

                    b.Property<string>("Product")
                        .HasColumnType("TEXT")
                        .HasColumnName("product");

                    b.Property<string>("Station")
                        .HasColumnType("TEXT")
                        .HasColumnName("station");

                    b.Property<long?>("Timestamp")
                        .HasColumnType("INTEGER")
                        .HasColumnName("timestamp");

                    b.Property<double?>("Weight")
                        .HasColumnType("REAL")
                        .HasColumnName("weight");

                    b.ToTable("qc_results");
                });

            modelBuilder.Entity("dg_foods_api.Models.StationModel", b =>
                {
                    b.Property<string>("Station")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("enabled");

                    b.HasKey("Station");

                    b.ToTable("stations");
                });

            modelBuilder.Entity("dg_foods_api.Models.UserModel", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("username");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
